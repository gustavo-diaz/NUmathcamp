---
title: "Tidyverse I"
author: "Aven Peters"
format: html
embed-resources: true
---

## Tidyverse I: Data Wrangling

### Review of Terminology

- There are two ways of viewing Quarto documents: source mode and visual mode. Unlike a Word document,
what you see while editing a document is not exactly what you'll see in the final version of the document.
Converting a Quarto document into a clean HTML, Word, or PDF file is called **rendering,** and you
can render your document at any time by clicking the render button at the top of the RStudio window.
When your document renders, your code will run from top to bottom, in order. This means that if you
create an object lower down on your script and then refer to that object above it, you will get an error
when you render your file. This is true *even if* your code ran perfectly as you wrote it.

- There are essentially two types of commands you can enter in R. The first is to store information.
This involves creating or modifying an object (and objects can be anything from single values to 
dataframes to regression models to plots). The second type of command is to retrieve information, or
equivalently, to print the value of an object. As we've seen, value is not necessarily numeric--it
could be a table, a plot, a list of strings, or a Boolean value (whether a statement is true or false).
We store information using an assignment operator (<- or =) and retrieve information by simply typing
the expression we want R to evaluate.

- Almost all of our work in R will use **functions.** Functions are effectively shortcuts for common
tasks in programming/data analysis. They can take any number of **arguments**, or inputs (including zero!)
and return an object as an output. In general, the order of the arguments matters. Some arguments have
defaults--that is, if you don't specify what values you want them to take, R will use its default. This is
the basic structure of code using a function:

```{r}
#| eval: FALSE

function(arg1, arg2, arg3, ...)
```


### Installing and Loading Packages

R is powerful in part because it is very flexible. Most data analysis tasks can be done several different ways in R, depending on your preferences and the characteristics of your data set. This flexibility comes from the ability to load **packages** with additional functions. Today, we'll be talking about "tidyverse," a suite of packages used for data wrangling and visualization. We can think of tidyverse as a "mega-package" that contains several smaller packages, including "dplyr" and "ggplot2." Usually, it makes sense to load the entire tidyverse at once so that we don't have to worry about which functions belong to each specific package within tidyverse.

If you don't have tidyverse installed, we'll have to do that first.

```{r install_tidyverse}
# install.packages("tidyverse") # to run this code, remove the # at the beginning
```

This line of code only needs to be run once on your device. After you've installed tidyverse, it lives on your machine forever.

Once a package is installed, we have to tell R that we want to use it in this specific R script/Quarto document. This is called loading the package, and we usually do it with the "library" function. Some packages come preloaded in every R session--these are called "base R."

```{r load_tidyverse}
library(tidyverse)
```

Note that we don't need quotation marks around the name of the package in the library function, even though we do need them in install.packages. Minor formatting choices like this matter a lot in R.

When we load tidyverse, we get the above output. This tells us the names of all of the packages within tidyverse that we've loaded. It also warns us that two functions in dplyr have the same names as functions in stats, which is part of base R. This is not a problem for us. By default, if two functions in different packages have the same name, the one that was loaded most recently will be used.

Now that we've loaded tidyverse, let's work with some data.

### Load and Examine Data

```{r judge_data}

data(USJudgeRatings) # load built-in data set

head(USJudgeRatings) # view the first 6 rows of data

view(USJudgeRatings) # view the full dataframe in a new window

?USJudgeRatings # view the documentation for this data set
```

Each row corresponds to one of 43 state judges in Connecticut in 1977. The columns indicate the average rating of each judge by a group of lawyers. Note that the column names are short and are not particularly intuitive. Later, we'll rename the columns to be clearer.

This data set is an example of **tidy data,** a format that makes data easier to work with. In tidy data, each row corresponds to an observation (a country, a survey respondent, a year, or any other unit of observation). Each column corresponds to a variable that was measured, and each cell is one measurement. Tidy data sets can have all kinds of different variables--strings, Boolean values (TRUE/FALSE), integers, and even missing values. In this case, all of our variables happen to have the type "double," which refers to a rational number.

While tidy data are convenient to work with, other ways of organizing data exist. If you find a data set with another organization structure, you will have to do some work to get it into a more usable format.

### Data Wrangling

The full name of the data set is a bit clunky. Let's create a copy with a simpler name. While we're at it, we can work on renaming the variables.

```{r}
judges <- USJudgeRatings # create a copy of USJudgeRatings with the name judges

judges_renamed <- judges %>% # load the dataframe judges
  rename(contacts = CONT) # rename the variable currently called "CONT" to "contacts"
```

The "rename" function is an example of a dplyr "verb." Verbs are actions we apply to dataframes.

Notice the symbol %\>% after the name of the dataframe. This is called a "pipe," and you may also seen it written \|\>. Pipes take some time to get used to, but they make R code a lot more readable. Essentially, the object before the pipe (usually a dataframe) is treated as the first argument of the function that comes after it. The following line of code is equivalent to the one shown above:

```{r}
judges_renamed <- rename(judges, contacts = CONT)
```

::: {.callout-tip}
#### Exercise

Rename the rest of the variables to more sensible names. In general, good variable names are in lowercase and do not have spaces or special characters. If you need to use two or more words, separate them with an underscore rather than a space. A variable name should succinctly communicate what the variable measures.
:::

Other dplyr verbs include the following:

-   arrange: sort dataframe by the values of one or more variables

-   filter: keep only the rows for which a particular statement is true (e.g., contacts \> 7)

-   select: keep only the listed columns

-   mutate: add a variable which is a function of other variables in the dataframe

-   summarise (or summarize--both spellings are equivalent): create a simple summary table

It's possible to do several verbs at once using pipes. For example, the following code filters out some rows of data and then computes the mean integrity and diligence scores for just those rows.

```{r}
judges_renamed %>%
  filter(contacts > 7) %>% # keep the rows for which contacts > 7 and remove the rest
  summarise(integrity = mean(INTG), # compute the mean of the integrity score
            diligence = mean(DILG)) # compute the mean of the diligence score
```

If we want a summary of all of the variables in the data set, we can use "summarise_all."

```{r}
judges_renamed %>%
  summarise_all(mean)
```

:::{.callout-tip}
#### Exercise
Last time, we learned several functions that can be used to summarize data, including mean, median, min, and max. Try summarizing using a function other than mean.
:::

Let's practice using a few more dplyr verbs:

```{r}
judges_revised <- judges_renamed %>%
  select(contacts, INTG, DMNR, DILG, RTEN) %>% # select five columns
  mutate(high_integrity = if_else(INTG > 8, 1, 0)) # create a variable called
  # "high_integrity" and give it the value 1 if integrity is above 8 and 0 otherwise

judges_revised %>%
  group_by(high_integrity) %>% # separate the following summary into two rows based
  # on whether the integrity score is higher than 8.
  summarise_all(mean)
```

The most straightforward way to use "select" is to simply list the names of the columns we want to keep. However, for data sets with many variables, this could be cumbersome. Here are some alternatives:

- Select all but PHYS

```{r}
judges_nophys <- judges_renamed %>%
  select(-PHYS) # the minus sign tells R to exclude PHYS and keep everything else
```

- Select a range of columns

```{r}
judges_firsthalf <- judges_renamed %>%
  select(contacts:DECI) # keep columns in the specified range
```

- Make a list of column names and keep all the columns in the list

```{r}
keep <- c("contacts", "INTG", "CFMG", "WRIT")

judges_list <- judges_renamed %>%
  select(all_of(keep))
```

:::{.callout-tip}
#### Exercise
Add another variable to the data frame using mutate. You might consider adding two existing variables together or making another variable with if_else. For an extra challenge, think about how you might compute a weighted average of one of the variables, with the weights determined by the "contacts" variable.
:::

Finally, let's learn about the arrange function together using the documentation. Our goal is to sort by retention score.

```{r}
?arrange # pull up documentation

judges_renamed %>%
  arrange(RTEN) # default is ascending

judges_renamed %>%
  arrange(desc(RTEN)) # specify that we want a descending sort

judges_renamed %>%
  arrange(desc(RTEN), # sort by retention score, then by number of contacts
          desc(contacts))

```
While there are many other dplyr verbs, these will get you pretty far. For a more advanced reference, see [this dplyr cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf). Now let's pivot to some basic data visualization.

## Data Visualization

Last time, we learned how to create a simple histogram with the hist function in base R. As a general rule, data visualization is more difficult in tidyverse compared to base R, but it's also much prettier and more customizable. We'll return to data visualization tomorrow, so don't worry if it's not perfectly clear at the end of today.

In tidyverse (and specifically, with the package ggplot2), all plots are organized with multiple "layers." You can think of each layer as adding detail to the one before it. Our first layer is always something called the *aesthetic layer*. This tells R which variables are represented by each axis (and by other things like color or dot size).

```{r}
judges_renamed %>% # load the dataframe and pipe it, as usual
  ggplot(aes(x = INTG)) # since this is a histogram, we need to specify the variable on the x-axis but not the y-axis (which will be the number of times it occurs).
```

With just an aesthetic layer, we have the background and x-axis of our plot, but no data. That's because we haven't told R what kind of plot we want yet. Let's do that now.

```{r}
judges_renamed %>%
  ggplot(aes(x = INTG)) + # to add a layer, we use a plus sign
  geom_histogram() # add the default histogram of our x variable
```

This is a bit better, but the default settings aren't well-suited to our data set. In particular, the bins are too thin, making it hard to see the general shape of the distribution. We can fix this by setting the number of bins or the width of each bin. We'll also change the color.

```{r}
judges_renamed %>%
  ggplot(aes(x = INTG)) + 
  geom_histogram(binwidth = 0.5, color = "seagreen", fill = "seagreen", alpha = 0.5) 
```

This looks a lot better. The bins are an appropriate width for the number and range of observations in our data set, and the colors are pleasant. But it would be nice to label the x-axis more clearly and add a title.

```{r}
judges_renamed %>%
  ggplot(aes(x = INTG)) + 
  geom_histogram(binwidth = 0.5, color = "seagreen", fill = "seagreen", alpha = 0.5) +
  labs(x = "Integrity score", title = "Histogram of Judges' Integrity Scores (Connecticut, 1977)") # add axis label and title
```

This looks pretty good. But we can customize the formatting even more with a theme layer.

```{r}
judges_renamed %>%
  ggplot(aes(x = INTG)) + 
  geom_histogram(binwidth = 0.5, color = "seagreen", fill = "seagreen", alpha = 0.5) +
  labs(x = "Integrity score", title = "Histogram of Judges' Integrity Scores (Connecticut, 1977)") +
  theme_classic()
```

:::{.callout-tip}
### Exercise
Create a histogram for a different variable in the data set. Experiment with different
bin widths. Using [this guide](https://bookdown.org/hneth/ds4psy/D-3-apx-colors-basics.html) to the built-in colors in R, change the color of the bars.
:::
