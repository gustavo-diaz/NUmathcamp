{
  "hash": "e74a4a984290c6834a65b39b73f0c46c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Matrices\"\nauthor: \"NU Social Science Math Camp\"\nformat: \n  revealjs:\n    embed-resources: true\n    slide-number: false\n    progress: false\n    code-line-numbers: false\n    code-overflow: wrap\n---\n\n\n## Getting ready\n\n\n\n\n\n- Set up [eduroam](https://services.northwestern.edu/TDClient/30/Portal/KB/ArticleDet?ID=1851)\n\n- Go back and make sure you have the MOST RECENT version of R and RStudio\n\n## Agenda\n\n- **Morning:** Matrices and matrix algebra\n- **Lunch:** Senior faculty\n- **Afternoon:** Tidyverse I\n\n# Basics\n\n## Scalars\n\nA single number is a scalar\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = 12\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n$$a = 12$$\n\n## Vectors\n\nWe already talked about vectors in R. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nb = c(12,14,15)\n```\n:::\n\n\nHow would you define them?\n\n. . .\n\nA collection of *concatenated* elements\n\n## Vectors\n\nColumn vector\n\n$$\n\\overrightarrow b = \n\\begin{bmatrix}\n  12 \\\\\n  14 \\\\\n  15\n\\end{bmatrix}\n$$\n\n. . .\n\nRow vector\n\n$$\n\\overrightarrow c = \\begin{bmatrix}\n  12 & 14 & 15\n\\end{bmatrix}\n$$\n\n## Vectors in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(5, 25, -2, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 25 -2  1\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10:20\n```\n:::\n\n\n\n## Vectors in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(5, 25, -2, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 25 -2  1\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10:20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 10 11 12 13 14 15 16 17 18 19 20\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 3, to = 27, by = 3)\n```\n:::\n\n\n## Vectors in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(5, 25, -2, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 25 -2  1\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10:20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 10 11 12 13 14 15 16 17 18 19 20\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 3, to = 27, by = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  6  9 12 15 18 21 24 27\n```\n\n\n:::\n:::\n\n\n## Summation\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & -1\n\\end{bmatrix}$$\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = c(12, 7, -2, 3, -1)\n```\n:::\n\n\n. . .\n\n$$\\sum_{i=1}^3 d_i$$ \n\n## Summation\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & -1\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = c(12, 7, -2, 3, -1)\n```\n:::\n\n\n$$\\sum_{i=1}^3 d_i = 12+7+(-2)$$ \n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(d[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n\n\n\n## Summation\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & -1\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = c(12, 7, -2, 3, -1)\n```\n:::\n\n\n. . .\n\n$$\n\\sum_{i=1}^n d_i\n$$ \n\n## Summation\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & -1\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = c(12, 7, -2, 3, -1)\n```\n:::\n\n\n\n$$\n\\sum_{i=1}^n d_i = 12 + 7 + (-2) + 3 + (-1)\n$$ \n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\n\n## Product\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & 1\n\\end{bmatrix}$$\n\n. . .\n\n$$\\prod_{i=1}^n d_i$$\n\n## Product\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & 1\n\\end{bmatrix}$$\n\n$$\\prod_{i=1}^n d_i = 12 \\cdot 7 \\cdot (-2) \\cdot 3 \\cdot (-1)$$\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprod(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 504\n```\n\n\n:::\n:::\n\n\n## Product\n\n$$\\overrightarrow d = \\begin{bmatrix}\n12 & 7 & -2 & 3 & 1\n\\end{bmatrix}$$\n\n\n**Practice:** Write and calculate the product of the first three elements of $\\overrightarrow{d}$\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprod(d[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -168\n```\n\n\n:::\n:::\n\n\n\n## Matrices\n\n. . .\n\n$$A = \\begin{bmatrix}\n12 & 14 & 15 \\\\\n115 & 22 & 127 \\\\\n193 & 29 & 219\n\\end{bmatrix}$$\n\n::: incremental\n- **Dimensions:** rows by columns ($r\\times c$)\n- **Notation:** $A_{3 \\times 3}$\n- Demarcate with [ ] \n:::\n\n. . .\n\nWhy are they important?\n\n## Create matrices in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create some vectors\nvector1 = 1:4\nvector2 = 5:8\nvector3 = 9:12\nvector4 = 13:16\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using rbind(), each vector will be a row \nrbind_mat = rbind(vector1, vector2, vector3, vector4)\nrbind_mat\n```\n:::\n\n\n## Create matrices in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create some vectors\nvector1 = 1:4\nvector2 = 5:8\nvector3 = 9:12\nvector4 = 13:16\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using rbind(), each vector will be a row \nrbind_mat = rbind(vector1, vector2, vector3, vector4)\nrbind_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        [,1] [,2] [,3] [,4]\nvector1    1    2    3    4\nvector2    5    6    7    8\nvector3    9   10   11   12\nvector4   13   14   15   16\n```\n\n\n:::\n:::\n\n\n\n## Create matrices in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create some vectors\nvector1 = 1:4\nvector2 = 5:8\nvector3 = 9:12\nvector4 = 13:16\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using cbind(), each vector will be a column\ncbind_mat = cbind(vector1, vector2, vector3, vector4)\ncbind_mat\n```\n:::\n\n\n\n## Create matrices in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create some vectors\nvector1 = 1:4\nvector2 = 5:8\nvector3 = 9:12\nvector4 = 13:16\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using cbind(), each vector will be a column\ncbind_mat = cbind(vector1, vector2, vector3, vector4)\ncbind_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     vector1 vector2 vector3 vector4\n[1,]       1       5       9      13\n[2,]       2       6      10      14\n[3,]       3       7      11      15\n[4,]       4       8      12      16\n```\n\n\n:::\n:::\n\n\n## Create matrices in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create some vectors\nvector1 = 1:4\nvector2 = 5:8\nvector3 = 9:12\nvector4 = 13:16\n```\n:::\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using rbind(), \n# each vector will be a row \nrbind_mat = rbind(vector1, vector2,\n                  vector3, vector4)\nrbind_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        [,1] [,2] [,3] [,4]\nvector1    1    2    3    4\nvector2    5    6    7    8\nvector3    9   10   11   12\nvector4   13   14   15   16\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using cbind(), \n# each vector will be a column\ncbind_mat = cbind(vector1, vector2, \n                  vector3, vector4)\ncbind_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     vector1 vector2 vector3 vector4\n[1,]       1       5       9      13\n[2,]       2       6      10      14\n[3,]       3       7      11      15\n[4,]       4       8      12      16\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Alternative\n\n::: aside\nTry `?matrix` for more information.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(data = c(1:12), nrow = 4, byrow = TRUE)\n```\n:::\n\n\n## Alternative\n\n::: aside\nTry `?matrix` for more information.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(data = c(1:12), nrow = 4, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n```\n\n\n:::\n:::\n\n\n&nbsp;\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(data = c(1:12), nrow = 4, byrow = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n\n\n:::\n:::\n\n\n## Structure\n\n. . .\n\n$$\nB=\n\\begin{bmatrix}\nb_{11} & b_{12} & b_{13} & \\ldots & b_{1n} \\\\\nb_{21} & b_{22} & b_{23} & \\ldots & b_{2n} \\\\\n\\vdots & \\vdots & \\vdots & \\ldots & \\vdots \\\\\nb_{m1} & b_{m2} & b_{m3} & \\ldots & b_{mn}\n\\end{bmatrix}\n$$\n\n::: incremental\n- $B$ is an $m \\times n$ matrix\n- $b_{23}$ is the second cell down and third across\n- $b_{ij}$ is the $i\\text{th}$ cell down and $j\\text{th}$ across\n- $i$: rows, $j$: columns\n:::\n\n## Indexing in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# byrow = FALSE is the default\nN = matrix(c(1:12), nrow = 4)\nN\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN[1,3]\n```\n:::\n\n\n## Indexing in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# byrow = FALSE is the default\nN = matrix(c(1:12), nrow = 4)\nN\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN[1,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n## Indexing in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# byrow = FALSE is the default\nN = matrix(c(1:12), nrow = 4)\nN\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nN[1,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n. . .\n\n**Practice:** Write code to find the index corresponding to number 12\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN[4,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n# Matrix Operations\n\n## Addition and subtraction\n\n. . .\n\n\n$$A \\pm B=C$$\n\n. . .\n\n$$c_{ij}=a_{ij} \\pm b_{ij} \\text{ }\\forall i,j$$\n\n. . .\n\n- Add or subtract each corresponding element\n\n- Need $A$ and $B$ to have *exactly* the same dimensions\n\n## Addition and subtraction\n\n$$\\begin{bmatrix}\na_{11} & a_{12} & a_{13}\\\\\na_{21} & a_{22} & a_{23}\\\\\na_{31} & a_{32} & a_{33}\n\\end{bmatrix}\n\\pm\n\\begin{bmatrix}\nb_{11} & b_{12} & b_{13}\\\\\nb_{21} & b_{22} & b_{23}\\\\\nb_{31} & b_{32} & b_{33}\n\\end{bmatrix}$$ $$=$$ $$\\begin{bmatrix}\na_{11}\\pm b_{11} & a_{12}\\pm b_{12} & a_{13}\\pm b_{13}\\\\\na_{21}\\pm b_{21} & a_{22}\\pm b_{22} & a_{23}\\pm b_{23}\\\\\na_{31}\\pm b_{31} & a_{32}\\pm b_{32} & a_{33}\\pm b_{33}\n\\end{bmatrix}$$\n\n## In R\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n$$A= \\begin{bmatrix}\n3 & -1 & 2  \\\\\n9 & 4 & 6\n\\end{bmatrix}$$\n:::\n\n::: {.column width=\"50%\"}\n$$B= \\begin{bmatrix}\n5 & 2 & 0  \\\\\n9 & 3 & 4\n\\end{bmatrix}$$\n:::\n\n::::\n\n## In R\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n$$A= \\begin{bmatrix}\n3 & -1 & 2  \\\\\n9 & 4 & 6\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix1 = matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)\nmatrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    3   -1    2\n[2,]    9    4    6\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n$$B= \\begin{bmatrix}\n5 & 2 & 0  \\\\\n9 & 3 & 4\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix2 = matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)\nmatrix2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    5    0    3\n[2,]    2    9    4\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix1 + matrix2\n```\n:::\n\n\n\n## In R\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n$$A= \\begin{bmatrix}\n3 & -1 & 2  \\\\\n9 & 4 & 6\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix1 = matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)\nmatrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    3   -1    2\n[2,]    9    4    6\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n$$B= \\begin{bmatrix}\n5 & 2 & 0  \\\\\n9 & 3 & 4\n\\end{bmatrix}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix2 = matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)\nmatrix2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    5    0    3\n[2,]    2    9    4\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix1 + matrix2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    8   -1    5\n[2,]   11   13   10\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix1 - matrix2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]   -2   -1   -1\n[2,]    7   -5    2\n```\n\n\n:::\n:::\n\n\n## Exercise\n\nDo one with code and the other by hand.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n1\\) Calculate $A + B$\n\n$$A= \\begin{bmatrix}\n1 & 0 \\\\\n-2 & -1\n\\end{bmatrix}$$\n\n$$B = \\begin{bmatrix}\n5 & 1 \\\\\n2 & -1\n\\end{bmatrix}$$\\\n:::\n\n::: {.column width=\"50%\"}\n2\\) Calculate $A - B$\n\n$$A= \\begin{bmatrix}\n6 & -2 & 8 & 12 \\\\\n4 & 42 & 8 & -6\n\\end{bmatrix}$$\n\n$$B = \\begin{bmatrix}\n18 & 42 & 3 & 7 \\\\\n0 & -42 & 15 & 4\n\\end{bmatrix}$$\n:::\n::::\n\n## Answers in R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 1) A + B\nA = matrix(c(1, 0, -2, -1), nrow = 2, byrow = TRUE)\nB = matrix(c(5, 1, 2, -1), nrow = 2, byrow = TRUE)\n\nA + B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    6    1\n[2,]    0   -2\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## 2) A - B\nA = matrix(c(6, -2, 8, 12, 4, 42, 8, -6), \n           nrow = 2, byrow = TRUE)\nB = matrix(c(18, 42, 3, 7, 0, -42, 15, 4), \n           nrow = 2, byrow = TRUE)\n\nA - B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4]\n[1,]  -12  -44    5    5\n[2,]    4   84   -7  -10\n```\n\n\n:::\n:::\n\n\n::: aside\nCareful with vector recycling in R!\n:::\n\n## Scalar multiplication\n\n. . .\n\n$$A = \n\\begin{bmatrix}\na_{11} & a_{12} & a_{13}\\\\\na_{21} & a_{22} & a_{23}\\\\\na_{31} & a_{32} & a_{33}\n\\end{bmatrix}$$ $$cA = \n\\begin{bmatrix}\nca_{11} & ca_{12} & ca_{13}\\\\\nca_{21} & ca_{22} & ca_{23}\\\\\nca_{31} & ca_{32} & ca_{33}\n\\end{bmatrix}$$\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 * matrix1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    9   -3    6\n[2,]   27   12   18\n```\n\n\n:::\n:::\n\n\n## Exercise\n\nCalculate $2\\times A$ and $-3 \\times B$.\n\n$$A= \\begin{bmatrix}\n    1 & 4 & 8 \\\\\n    0 & -1 & 3\n    \\end{bmatrix}$$ $$ B = \\begin{bmatrix}\n    -15 & 1 & 5 \\\\\n    2 & -42 & 0 \\\\\n    7 & 1 & 6\n    \\end{bmatrix}$$\n    \nDo one by hand, one in code\n\n## Answers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(c(1, 4, 8,\n             0, -1, 3),\n           nrow = 2, byrow = TRUE)\n2*A\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    8   16\n[2,]    0   -2    6\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB = matrix(c(-15, 1, 5,\n             2, -42, 0,\n             7, 1, 6),\n           nrow = 3, byrow = TRUE)\n\n-3*B\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]   45   -3  -15\n[2,]   -6  126    0\n[3,]  -21   -3  -18\n```\n\n\n:::\n:::\n\n\n## Matrix multiplication {{< fa skull-crossbones >}} \n\n::: incremental\n- Matrices must be **conformable**\n\n- For $A \\times B$ we need $A_{i \\times k}$ and $B_{k \\times j}$\n\n- The result will have $i \\times j$ dimensions\n\n- Order matters! $A \\times B \\neq B \\times A$ even if both operations are conformable \n:::\n\n## Multiplication steps\n\n::: incremental\n1. Multiply each row by each column, summing up each pair of multiplied terms (*dot product*)\n\n2. The element in position $ij$ is the sum of the products of elements in the $i$th row of the first matrix ($A$) and the corresponding elements in the $j$th column of the second matrix ($B$). $$c_{ij}=\\sum_{k=1}^n a_{ik}b_{kj}$$\n\n:::\n\n## Example\n\nFurniture company construction costs ($)\n\n\n|          | Chair | Sofa |\n|----------|-------|------|\n| Wood     | 100   | 150  |\n| Cloth    | 270   | 420  |\n| Feathers | 130   | 195  |\n\n. . .\n\n$$C = \\begin{bmatrix}\n100 & 150\\\\\n270 & 420\\\\\n130 & 195\n\\end{bmatrix}$$\n\n## Example\n\nMonthly production\n\n| Product | Quantity |\n|---------|----------|\n| Chair   | 45       |\n| Sofa    | 30       |\n\n. . .\n\n$$Q = \\begin{bmatrix}\n45 \\\\\n30 \n\\end{bmatrix}$$\n\n## Example\n\nTotal expenditure\n\n$$ E = CQ = \\begin{bmatrix}\n100 & 150\\\\\n270 & 420\\\\\n130 & 195\n\\end{bmatrix}\n\\begin{bmatrix}\n45 \\\\\n30 \n\\end{bmatrix}$$\n\n. . .\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n|          | Chair | Sofa |\n|----------|-------|------|\n| Wood     | 100   | 150  |\n| Cloth    | 270   | 420  |\n| Feathers | 130   | 195  |\n\n:::\n\n::: {.column width=\"50%\"}\n\n| Product | Quantity |\n|---------|----------|\n| Chair   | 45       |\n| Sofa    | 30       |\n\n:::\n\n::::\n\n\n## Example\n\nTotal expenditure\n\n$$ E = CQ = \\begin{bmatrix}\n100 & 150\\\\\n270 & 420\\\\\n130 & 195\n\\end{bmatrix}\n\\begin{bmatrix}\n45 \\\\\n30 \n\\end{bmatrix}$$\n\n. . .\n\n$$\n= \\begin{bmatrix}\n(100)(45) + (150)(30) \\\\\n(270)(45) + (420)(30) \\\\\n(130)(45) + (195)(30)\n\\end{bmatrix} =\n\\begin{bmatrix}\n9,000 \\\\\n24,750 \\\\\n11,700\n\\end{bmatrix}\n$$\n\n## Matrix multiplication in R\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC = matrix(c(100, 270, 130, \n             150, 420, 195), \n           nrow = 3)\nC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]  100  150\n[2,]  270  420\n[3,]  130  195\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nQ = matrix(c(45, 30), \n           nrow = 2)\nQ\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]\n[1,]   45\n[2,]   30\n```\n\n\n:::\n:::\n\n\n:::\n\n::::\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nC %*% Q # Matrix multiplication operator\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1]\n[1,]  9000\n[2,] 24750\n[3,] 11700\n```\n\n\n:::\n:::\n\n\n## Practice\n\nCheck in R with the `%*%` operator to see if these are conformable\n\n$$\n\\begin{aligned}\nB_{4 \\times 1}=\n\\begin{bmatrix}\n2 \\\\\n3\\\\\n4\\\\\n1\n\\end{bmatrix}\nM_{3 \\times 3} = \n\\begin{bmatrix}\n1 & 0 & 2\\\\\n1 & 2 & 4\\\\\n2 & 3 & 2\n\\end{bmatrix}\nL_{2 \\times 3} = \n\\begin{bmatrix}\n6 & 5 & -1\\\\\n1 & 4 & 3 \n\\end{bmatrix}\n\\end{aligned}\n$$\n\n## Partial answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB = matrix(c(2,3,4,1), ncol = 1)\n\nM = matrix(c(1, 1, 2, 0, 2, 3, 2, 4, 2), ncol = 3)\n\nL = matrix(c(6, 1, 5, 4, -1, 3), ncol = 3)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nB %*% M\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in B %*% M: non-conformable arguments\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL %*% M\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    9    7   30\n[2,]   11   17   24\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nM %*% L\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in M %*% L: non-conformable arguments\n```\n\n\n:::\n:::\n\n\n## Properties of operations\n\n. . .\n\n**Addition and subtraction:**\n\n::: incremental\n-   Associative: $(A \\pm B) \\pm C = A \\pm (B \\pm C)$\n-   Commutative: $A \\pm B = B \\pm A$\n:::\n\n. . .\n\n**Multiplication:**\n\n::: incremental\n-   $AB \\neq BA$\n\n- If $AB = BA$ we say they **commute**\n\n-   $A(BC) = (AB)C$\n\n-   $A(B+C) = AB + AC$\n:::\n\n# Special matrices\n\n## Square matrix\n\n$$\nA = \\begin{bmatrix}\n1 & 2 & 3 \\\\\n4 & 5 & 6 \\\\\n7 & 8 & 9\n\\end{bmatrix}\n$$\n\n. . .\n\n::: incremental\n-   $m=n$\n\n-   Diagonal $d(A)=\\{1,5,9\\}$\n\n-   Trace $tr(A) = 1+5+9 = 15$\n\n:::\n\n## Diagonal matrix\n\n$$\nD = \\begin{bmatrix}\n4 & 0 & 0 \\\\\n0 & 5 & 0 \\\\\n0 & 0 & 6\n\\end{bmatrix}\n$$\n\n## Scalar matrix\n\n$$\nS = \\begin{bmatrix}\n7 & 0 & 0 \\\\\n0 & 7 & 0 \\\\\n0 & 0 & 7\n\\end{bmatrix}\n$$\n\n## Identity matrix\n\n$$\nI = \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & 1 & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix}\n$$\n\n- Can use $I_3$ as a shorthand\n\n## Transpose\n\n$$J =\n\\begin{bmatrix}\n4 & 5\\\\\n3 & 0\\\\\n7 & -2\n\\end{bmatrix} \\quad J' = J^T = \n\\begin{bmatrix}\n4 & 3 & 7 \\\\\n5 & 0 & -2\n\\end{bmatrix}$$\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJ = matrix(c(4, 3, 7, 5, 0, -2), ncol = 2)\nJ\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    4    5\n[2,]    3    0\n[3,]    7   -2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt(J)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    4    3    7\n[2,]    5    0   -2\n```\n\n\n:::\n:::\n\n\n## Inverse\n\n$$A × A^{-1} = I$$\n\n. . .\n\nThe inverse of $A$ is $A^{-1}$ iff\n\n$$AA^{-1} = A^{-1}A = I$$\n\n::: aside\nSometimes there is no inverse\n:::\n\n## Finding inverse in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(c(3, 2, 5, 2, 3, 2, 5, 2, 4), ncol = 3)\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    3    2    5\n[2,]    2    3    2\n[3,]    5    2    4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsolve(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            [,1]        [,2]       [,3]\n[1,] -0.29629630 -0.07407407  0.4074074\n[2,] -0.07407407  0.48148148 -0.1481481\n[3,]  0.40740741 -0.14814815 -0.1851852\n```\n\n\n:::\n:::\n\n\n. . .\n\n## Transpose and inverse are very important!\n\n$$\\widehat{\\beta} = \\underbrace{(X'X)^{-1}X'Y}_\\text{\"X prime X inverse, X prime Y\"}$$\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}