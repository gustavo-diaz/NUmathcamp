{
  "hash": "a122d5c71c1dcdde4ad589db7a630505",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Computational Social Science and R\"\nformat: \n  html:\n    embed-resources: true\ntoc: true\n\n---\n\n\n## Programming for Social Science research\n\n-   **Understanding social science research**. Combination of Statistics and Programming would allow you to read, understand and reproduce other scholars' works.\n\n-   **Automation of manual labor**. Programming saves time in many tasks. Calculations, data gathering, and many more could be automated with basic knowledge of programming.\n\n-   **Producing own research**. Programming empowers researchers to design and execute their own custom analyses, simulations, and data visualizations.\n\n\n### R vs Other \n\n-   Excel\n\n-   Stata/SPSS/etc.\n\n-   Python\n\nR language is 2nd most used statistical software in academia.^[[details here](https://www.r-bloggers.com/2023/06/update-to-data-science-software-popularity/)]\nNew social science methods and thus packages are usually either developed in R or adapted to R (e.g., [quanteda](https://quanteda.io) for NLP, [CEM](https://gking.harvard.edu/cem) for causal inference, etc.). However, R allows you to do so many more. For example, this website was made with R and RStudio.\n\n### Installing R and RStudio\n\n**Firstly**, we need to install R. Click the button below and click \"Download and Install R\". Choose your OS. For Windows you need to download \"**base**\", for MacOS and Linux you have to choose your version of OS. Install.\n  \n<center>[Download R](https://cran.rstudio.com){.btn .btn-primary .btn role=\"button\" target=\"_blank\" style=\"width:200px\"}</center>\n\n<details>\n  <summary>Step one</summary>\n  <center>![](https://raw.githubusercontent.com/gustavo-diaz/NUmathcamp/main/r/images/install_r_cran.png)</center>\n  \n  For windows:\n  \n  <center>![](https://raw.githubusercontent.com/gustavo-diaz/NUmathcamp/main/r/images/install_r_base.png)</center>\n</details>\n\n**Secondly**, we need to install RStudio. Click the button below and click \"Download RStudio Desktop\". You will be redirected to your version automatically. Install.\n\n<center>[Download RStudio](https://posit.co/download/rstudio-desktop/){.btn .btn-primary .btn role=\"button\" target=\"_blank\" style=\"width:200px\"}</center>\n\n<details>\n  <summary>Step two</summary>\n  <center>![](https://raw.githubusercontent.com/gustavo-diaz/NUmathcamp/main/r/images/install_rstudio_posit.png)</center>\n</details>\n\n### Navigating RStudio\n\nIt will take some time to understand how everything works in RStudio, but when you get it it's quite straightforward. The most classic UI consists of four panes.\n\n1.    **Source**. Here we write code to run. \n\n2.    **Environment**. This pane allows you to interact with the data loaded into RStudio. \n\n3.    **Console**. This pane provides an area to interactively execute code.\n\n4.    **Files**. By default, this pane has your working directory. From here you can access files associated with the project.\n\n<center>![User Interface](https://raw.githubusercontent.com/gustavo-diaz/NUmathcamp/main/r/images/navigating_rstudio.png)</center>\n\n### Turning to practice\n\n<center>[Download script](){.btn .btn-primary .btn role=\"button\" target=\"_blank\" download=\"01_intro.qmd\" style=\"width:200px\"}</center>\n\n## Markdown and Quarto\n\nIn RStudio you can use markdown language to format the text. \n\nFor example, **this is bold text** and *this is italic text*. And, of course, you can insert images. It's pretty easy, and after the class you can take a look on some [tutorials](https://www.markdownguide.org/basic-syntax/).\n\n![Northwestern Logo](https://www.northwestern.edu/brand/images/wordmark/wordmark-vert.jpg)\n\nYou can do many-many more different things. In this regards visual editor in RStudio might be helpful. Markdown is also used in several note taking apps, e.g. [Obsidian](https://obsidian.md) or [Notion](https://www.notion.so). Feel free to utilize Markdown knowledge for you Graduate Studies.\n\nGenerally, what we've done so far can be described by the image below. We have downloaded R (\"engine\") and RStudio (\"car\"). In Rstudio we have Quarto, which is this document you are working with right now. We can do a lot of things right now -- e.g., render our output to a word document, PDF or HTML. \n\n![R software](https://raw.githubusercontent.com/gustavo-diaz/NUmathcamp/main/r/images/r_rstudio_quarto_output.png)\n\n## Data Structures in R\n\n### Objects: Basic Operations\n\nNow, let's turn to statistics and programming. This gray part of the document is called **chunk** or **code block**. Here we can code. Let's create an object called `number` and assign to it `1`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber <- 1\nnumber\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n**First shortcut**. On windows you can use `Alt` and `-`, on Mac you can use `Option` and `-` to insert assignment operator. Try it out! Alternatively, you can always type `<-` or `=` yourself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword ... c(\"Northwestern\")\nword\n```\n:::\n\n:::\n\nAs you noticed, created objects can contain different information, be it numbers or words. As R is the object-oriented language, we can perform different manipulations with our objects.\n\n-   For example, some basic mathematical operations with numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber + 2\nnumber - 2\nnumber * 2\nnumber / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n[1] -1\n[1] 2\n[1] 0.5\n```\n\n\n:::\n:::\n\n\n-   With words, for example, you can calculate the number of characters \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnchar(word)\n```\n:::\n\n\n### Vectors: Logical Operations and Descriptive Statistics\n\nBut the real power of programming starts with vectors. Vectors are collection of objects. To create one, you will need to use function `c()`. Here's an example,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(1, 2, 3)\nnumbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n**Second shortcut**. To insert a chunk on Windows you can use `Ctrl+Alt+I`, on Mac `Cmd+Option+I`. Try it out and instead of `...` insert the following code in this chunk: `words <- c(\"Welcome\", \"to\" ,\"Northwestern\")`\n:::\n\n`...`\n\n#### Basic logical operations \n\nLet us start with numbers. R allows you to automate calculation of statistics, perform different manipulations on a set of values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 7 8\n```\n\n\n:::\n:::\n\nYou can check if some object in a vector is equal to some specified value using `==` operator. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n*Why are we using double equal sign?*\n\nFurthermore, we can easily check what values are greater or less than some number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers > 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nnumbers < 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\nThe table below summarizes most important logical operators in R. They are quite straightforward, but it might take some time to memorize it.\n\n| Operation                     | Symbol | Example Usage       |\n|-------------------------------|--------|---------------------|\n| Equal to                      | `==`   | `x == y`            |\n| Not equal to                  | `!=`   | `x != y`            |\n| Greater than                  | `>`    | `x > y`             |\n| Less than                     | `<`    | `x < y`             |\n| Greater than or equal to      | `>=`   | `x >= y`            |\n| Less than or equal to         | `<=`   | `x <= y`            |\n| Logical AND                   | `&`    | `(x > y) & (a < b)` |\n| Logical OR                    | `|`    | `(x > y) | (a < b)` |\n| Logical NOT                   | `!`    | `!(x > y)`          |\n\nLet's say we asked a group of people their ages in an Evanston coffee shop. We obtained the following data and assigned it to an object called `age`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- c(18, 20, 21, 19, 24, 21, 20, 22)\n```\n:::\n\n\nWho is allowed to order espresso martini (*yes, in the US drinking age is 21!*)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage ... 21\n```\n:::\n\n\nWho is not 20 years old?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n...\n```\n:::\n\n\nWho is between 20 and 22?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(age >= 20) & (age ... 22)\n```\n:::\n\n\nFurthermore, you can access the data using indexation. Let's say you entered the data into your object `age` as you were receiving the results. You can access the age of your second respondent by indicating `[i]` to an object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\nIs the 4th responded older than 2nd?\n\n::: callout-tip\n**Third shortcut**. To run only selected line of code or a code highlight you can use `Ctrl + Enter` on Windows and `Cmd + Return` on Mac. Try accessing age of 4th and 2nd respondents separately.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage[...] ... \n```\n:::\n\n\n\n#### Descriptive statistics\n\nNow we are turning to a slightly more advanced things. Most commonly people describe the whole data they have (*sometimes it's hundreds and thousands of observations*) with only a couple of numbers.\n\nFor example, we can calculate the average age in our surveyed group.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20.625\n```\n\n\n:::\n:::\n\n\nAlternatively, we can describe our data with minimum and maximum values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin(age)\nmax(age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18\n[1] 24\n```\n\n\n:::\n:::\n\n\nUsually such description of data is called **descriptive statistics**. There is a helpful command `summary()` that allows us to describe data in one line. Try it out! What median did you get?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(...)\n```\n:::\n\n\nYou can use the table below for your reference\n\n| Statistic          | Function       | Example Usage            |\n|--------------------|----------------|--------------------------|\n| Minimum            | `min()`        | `min(x)`                 |\n| Maximum            | `max()`        | `max(x)`                 |\n| Mean               | `mean()`       | `mean(x)`                |\n| Median             | `median()`     | `median(x)`              |\n| Standard Deviation | `sd()`         | `sd(x)`                  |\n| Variance           | `var()`        | `var(x)`                 |\n| Sum                | `sum()`        | `sum(x)`                 |\n| Summary            | `summary()`    | `summary(x)`             |\n\n\nWe also asked people in the coffee shop about their major and got the following data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmajor <- c(\"computer science\", \"sociology\", \"sociology\", \"political science\", \"political science\", \"political science\", \"computer science\", \"sociology\")\n```\n:::\n\n\nTry to get the descriptive statistics for this data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n...\n```\n:::\n\n\nInsert a chunk and access major of the 3rd respondent.\n\n`...`\n\n### Dataframes\n\nA dataframe is the most commonly used data structure in data analysis. Basically, it's a simple table that you probably have seen in Excel. Let's create one. We have two vectors, `age` and `major`. We can combine them into one table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespondents <- data.frame(age, major)\nrespondents\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  age             major\n1  18  computer science\n2  20         sociology\n3  21         sociology\n4  19 political science\n5  24 political science\n6  21 political science\n7  20  computer science\n8  22         sociology\n```\n\n\n:::\n:::\n\n\nColumns are vectors. In a table format they are referred to as **variables** (and thus these labels are used interchangeably). Rows are called **observations**. There are some useful commands that provide information about your dataframe.\n\n-   Names of your variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(respondents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"age\"   \"major\"\n```\n\n\n:::\n:::\n\n\n-   Number of rows in your dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(respondents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n-   Number of columns in your dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(respondents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n-   Number of dimensions (number of rows and columns)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(respondents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 2\n```\n\n\n:::\n:::\n\n\nTo access a variable as vector you can use `$` sign. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespondents$age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 20 21 19 24 21 20 22\n```\n\n\n:::\n:::\n\n\nThis would allow you to manipulate this variable. And as a *spoiler* of the future sections, let's visualize this data!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(respondents$age)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nYou can easily combine previously used functions. For example, indexation provides access to any observation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespondents$major[8]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sociology\"\n```\n\n\n:::\n:::\n\n\nOr you can get the maximum age in our dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(respondents$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24\n```\n\n\n:::\n:::\n\n\nMoreover, `$` operator can create a new variable in your dataframe. Let's calculate the number of characters in majors using the `nchar()` function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrespondents$nchar_major <- ...(respondents$...)\nrespondents\n```\n:::\n\n\nHere is a dataset that consist of information about selected cars. Provide your answers to the questions using code \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars_information <- mtcars\n```\n:::\n\n\nWhat information is included in the dataset (list names of the variables)?\n\n\n::: {.cell}\n\n:::\n\n\n::: callout-tip\nTo understand what these variables stand for you can check details about included datasets or any other functions using `?`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mtcars\n```\n:::\n\n:::\n\n::: callout-note\n## Exercise\n\nHow many cars are listed in the dataframe (how many rows are there)?\n\n\n::: {.cell}\n\n:::\n\n\nDescribe `mpg` variable. Include average, minimum and maximum.\n\n\n::: {.cell}\n\n:::\n\n\nWhat is the minimum horsepower (`hp`)?\n\n\n::: {.cell}\n\n:::\n\n\nAre there any cars that have horse power greater than 200 but less than 250? \n\n\n::: {.cell}\n\n:::\n\nCreate a new variable called `power_to_weight`, which calculates the ratio of horsepower (`hp`) to weight (`wt`). You need to divide horsepower by weight\n\n\n::: {.cell}\n\n:::\n\nWhat is an average Power to Weight Ratio?\n\n\n::: {.cell}\n\n:::\n\n\nWhat is a minimum Power to Weight Ratio?\n\n\n::: {.cell}\n\n:::\n\n\nCreate a histogram of `power_to_weight` variable\n\n\n::: {.cell}\n\n:::\n\n:::\n\n\n## Data classes\n\nAs you have noticed, we deal with different classes of data. Sometimes these are words (e.g., names of cars or majors) and numbers (e.g., age or horsepower). The analysis we perform is highly dependent on data classes. But before discussing it in a detail, we need to install one library that would help us to grasp this difference. All functions we have worked before are base to R. However, to access some other useful functions we might need to download add-ons/libraries/packages (*used interchangeably*). Run the code below to install `DiagrammeR` library. **You need to do it only once**. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"DiagrammeR\")\n```\n:::\n\n\nThese are the basic classes of data in R. Some examples might include:\n\n-   **Nominal**: Names, Labels, Brands, Country names, etc.\n\n-   **Ordinal**: Educational Levels (High School-BA-MA-PhD), Customer Rating (Unsatisfied-Neutral-Satisfied), etc.\n\n-   **Discrete**: Number of customers per day, number of seats won by political parties, etc.\n\n-   **Continuous**: Height of people, voter turnout, etc.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"DiagrammeR html-widget html-fill-item\" id=\"htmlwidget-0bae74ad673dada31f00\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0bae74ad673dada31f00\">{\"x\":{\"diagram\":\"\\ngraph LR\\n    D[Data] --> C[Categorical]\\n    D --> N[Numerical]\\n    C --> no[Nominal]\\n    C --> Or[Ordinal]\\n    N --> di[Discrete]\\n    N --> co[Continuous]\\n    no --> f[Factor]\\n    no --> c[Character]\\n    Or --> f[Factor]\\n    Or --> c[Character]\\n    di --> i[Integer]\\n    co --> n[Numeric]\\n\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nFor each object, vector, or variable, you can check its class\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(cars_information$mpg)\nclass(respondents$major)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n[1] \"character\"\n```\n\n\n:::\n:::\n\nAlternatively, you can check if this variable is of specific class\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(cars_information$mpg)\nis.character(cars_information)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n[1] FALSE\n```\n\n\n:::\n:::\n\nTake a look on the `cyl` variable in cars dataset. What is its class?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n...\n\nclass(...)\n```\n:::\n\nDo you think R classified it properly? If a variable is identified incorrectly, you can change it.\n\nFor example, you can change it to integer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncars_information$cyl = as.integer(cars_information$cyl)\n```\n:::\n\n\n\n## Loading data and Exercises\n\nData classes become increasingly relevant as you work with public datasets. I suggest you inspect if the variables were treated correctly by R. \n\nHere are the most common file types to save/load your datasets:\n\n-   `csv` is widely universally in data analysis. A default option for R users\n\n-   `xslx` is Excel's file type. You can easily use it in R too\n\n-   `dta` is Stata file, you can use it in R too\n\n-   `rds` is R file. Most comfortable to work with in R.\n\nLet's try the most used one, namely `csv`. Download Corruption Perception Index dataset from transparency international using this [URL](https://artur-baranov.github.io/data/cpi.csv).\n\nYou need to put this dataset to your current working directory, which is\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\nThen, load the dataset. CPI = 0 is a highly corrupt country, whereas CPI = 100 is very clean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncpi <- read.csv(\"cpi.csv\")\n```\n:::\n\n\n::: callout-note\n## Exercise\n\nWhat are the variables in the dataset?\n\n\n::: {.cell}\n\n:::\n\n\nHow many observations are there?\n\n\n::: {.cell}\n\n:::\n\n\nCheck the classes of the variables. Is everything correct?\n\n\n::: {.cell}\n\n:::\n\n\nProvide the descriptive statistics of `cpi_2023` variable\n\n\n::: {.cell}\n\n:::\n\n\nCreate a new variable that would provide difference between CPI of a country in 2023 and 2022. On average, are countries getting cleaner in terms of corruption?\n\n\n::: {.cell}\n\n:::\n\nDraw a histogram of this newly created variable\n\n\n::: {.cell}\n\n:::\n\n\nCalculate average and median. Are they different - if yes, why?\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n## Prepare for the tomorrow's class\n\nYou'll need to install `tidyverse` library. It allows you to do so many more! Insert the name of the library and install it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(...)\n```\n:::\n\n\nSmall spoiler alert what you can do with it! Do you remember our histogram before? Check it out. This is a pretty powerful tool to understand what's going on in your data. See you tomorrow!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nggplot(data = respondents) +\n  geom_histogram(aes(x = age, fill = major), binwidth = 2)\n```\n\n::: {.cell-output-display}\n![](01_intro_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n## Check List \n\n<input type=\"checkbox\"/> I know what panes in RStudio used for\n\n<input type=\"checkbox\"/> I know what objects, vectors and dataframes are, and I know how to create them\n\n<input type=\"checkbox\"/> I know what variables and observations are\n\n<input type=\"checkbox\"/> I know what descriptive statistics is and I can easily calculate average, median, etc.\n\n<input type=\"checkbox\"/> I know how to create a variable and how to change its class \n\n<input type=\"checkbox\"/> I know how to load data to R and how to install new libraries \n\n## Sources\n\n-   Higher School of Economics, Data Science Minor, https://electives.hse.ru/minor_data_spb/\n\n-   Posit, RStudio User Guides, https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html\n\n-   Transparency International, Corruption Perception Index, https://www.transparency.org/en/cpi/\n\n-   UT Austin, Department of Government, Methods Camp, https://methodscamp.github.io/\n\n-   Harvard University Department of Government, Math Prefresher, https://iqss.github.io/prefresher/",
    "supporting": [
      "01_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/d3-3.3.8/d3.min.js\"></script>\n<script src=\"../site_libs/dagre-0.4.0/dagre-d3.min.js\"></script>\n<link href=\"../site_libs/mermaid-0.3.0/dist/mermaid.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/mermaid-0.3.0/dist/mermaid.slim.min.js\"></script>\n<link href=\"../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/chromatography-0.1/chromatography.js\"></script>\n<script src=\"../site_libs/DiagrammeR-binding-1.0.11/DiagrammeR.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}